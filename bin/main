#rubocop:disable all

class TicTacToe
    attr_accessor :name1 , :name2 
  def initialize
    @name1 
    @name2
  end

  def user_interface
      puts "WELCOME TO TIC TAC TOE YOU WILL LOVE IT"
      puts "---------------------------------------\n\n"
      print "Player 1 name "
      @name1 = gets.chomp.capitalize!
      puts " "
      print "Player 2 name "
      @name2 = gets.chomp.capitalize!
      puts " "
      puts "----------------------------------------------------------------------"
      puts "|#{@name1} and #{@name2}. You Both are going to be oponent for this Game|"
      puts "----------------------------------------------------------------------"
      puts " "
      puts "Below is the Game board you can type your turn that is Specified in the Board"
      puts " "
  end
end

class Board
    attr_accessor :board
def initialize
    @board = [" "," "," "," "," "," "," "," "," "]
end
  def display_board(board)
      puts " #{board[0]} | #{board[1]} | #{board[2]} "
      puts "-----------"
      puts " #{board[3]} | #{board[4]} | #{board[5]} "
      puts "-----------"
      puts " #{board[6]} | #{board[7]} | #{board[8]} "
      puts " "
  end

  def input_to_index(input)
     index = input.to_i - 1
  end

  def move(board,index,player)
      player = player.current_player(board,player.player)
          board[index] = player
  end

  def position_taken?(board,index)
      if board[index] == "X" || board[index] == "O"
          true
      else
          false
      end
  end
  
  def valid_move?(board,index)
      if position_taken?(board,index) == false && index.between?(0,8)
          true
      else
          false
      end
  end
end

class GameStatus
    attr_accessor :win_combinations
    def initialize
        @win_combinations = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]
    end
  def game_over?(board,win_combinations)
      if draw?(board,win_combinations) || full?(board)
         true
      else
         false
      end
  end

  def full?(board)
    board.all? do |check|
      if check == "X" || check =="O"
         true
      else
         false
      end
    end
  end
  def draw?(board,win_combinations)
      if full?(board) && !won?(board,win_combinations)
         true
       else
         false
       end
   end

  def won?(board,win_combinations)
      win_combinations.detect do |check|
         if board[check[0]] == "X" && board[check[1]] == "X" && board[check[2]] == "X"
             check
         elsif board[check[0]] == "O" && board[check[1]] == "O" && board[check[2]] == "O"
             check
         else
             false
         end
      end
   end

   def winner(board,name1,name2,win_combinations)
      if won?(board,win_combinations)
          if board[won?(board,win_combinations)[0]] == "X"
             name1
          else
             name2
          end
       end

   end
end

class Player
    attr_accessor :player
def initialize
    @player = "X"
end
  def Play(game_board,tic_tac_game,game_status,game_player)
      while !game_status.game_over?(game_board.board,game_status.win_combinations)
        turn(game_board,game_player,tic_tac_game.name1,tic_tac_game.name2,game_status.win_combinations)
      end

      if game_status.won?(game_board.board,game_status.win_combinations)
         puts "Congratulations #{winner(game_board.board,tic_tac_game.name1,tic_tac_game.name2,game_status.win_combinations)} , You Won"
      end

      if game_status.draw?(game_board,game_status)
         puts "#{tic_tac_toe_game.name1},#{tic_tac_toe_game.name2} Game has been a Draw Well Played "
      end    
  end
    def name_turn(board,player,name1,name2)
      if current_player(board,player) == "X"
          name1
      else
          name2
      end
  end

  def turn(game_board,player,name1,name2,win_combinations)
     puts "Its #{ name_turn(game_board.board,player,name1,name2)} turn, your Token is #{current_player(game_board.board,player)}"
     puts "enter no to take position 1-9"
     input = gets.strip
     index = game_board.input_to_index(input)
     if game_board.valid_move?(game_board.board,index)
         game_board.move(game_board.board,index,player)
         game_board.display_board(game_board.board)
      else
          puts "invalid move Type again"
      end
  end
  def turn_count(board)
      counter = 0
      board.each do |check|
          if check == "X" || check == "O"
              counter += 1
          end
      end
    counter
  end

  def current_player(board,player)
      if turn_count(board) % 2 == 0 
          player = "X"
      else
          player = "O"
      end
  end
end


tic_tac_game = TicTacToe.new
game_board   = Board.new
game_status  = GameStatus.new
game_player  = Player.new
tic_tac_game.user_interface
game_board.display_board(board = [" "," "," "," "," "," "," "," "," "])
game_player.Play(game_board,tic_tac_game,game_status,game_player)